<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.studyboot.sms.dao.MemberDao">
  
  <resultMap type="member" id="memberMap">
    <id column="member_id" property="no"/>
    <result column="pwd" property="password"/>
    <result column="email" property="email"/>
    <result column="nick_name" property="nickName"/>
    <result column="join_date" property="registeredDate"/>
    <result column="name" property="name"/>
    <result column="rate" property="rate"/>
    <result column="birth" property="birth"/>
    <result column="tel" property="tel"/>
    <result column="photo" property="photo"/>
    <result column="admin" property="admin"/>
    <result column="adr_lms" property="address"/>
    <collection property="cls" ofType="string">
    <result column="cls_lms"/>
    </collection>
  </resultMap>
  
  <sql id="default-columns">
      member_id, 
      nick_name, 
      name,
      email, 
      tel,
      admin,
      adr_lms,
      join_date,
      rate,
      photo,
      birth
  </sql>
  
  <select id="findAllRate" resultMap="memberMap">
    select
      m.member_id,
      m.rate,
      c.cls_lms
    from
      sms_member m
      left outer join sms_member_cls c on c.member_id = m.member_id
  </select>
  
  <select id="findByKeyword" resultType="int" parameterType="map">
    select member_id from sms_member
   <where>
   <if test="keyword != null">
        <bind name="pattern1" value="'%' + keyword + '%'"/>
        name like #{pattern1}
    </if>
    </where>   
  </select>
  
  <select id="findByEmailPassword" resultMap="memberMap" parameterType="map">
    select 
      m.member_id, 
      m.nick_name, 
      m.name,
      m.email, 
      m.tel,
      m.admin,
      m.adr_lms,
      m.join_date,
      m.rate,
      m.photo,
      m.birth,
      c.cls_lms
    from 
      sms_member m
      left outer join sms_member_cls c on c.member_id = m.member_id
    where 
      email = #{email}
      and pwd = password(#{password})
  </select>
  
  
  <select id="findByEmail" resultMap="memberMap" parameterType="string">
    select 
      m.member_id, 
      m.nick_name, 
      m.name,
      m.email, 
      m.tel,
      m.admin,
      m.adr_lms,
      m.join_date,
      m.rate,
      m.photo,
      m.birth,
      c.cls_lms
    from 
      sms_member m
      left outer join sms_member_cls c on c.member_id = m.member_id
    where 
      email = #{value}
  </select>
  
  <select id="findByKeywordMsg" resultType="int" parameterType="map">
    select member_id from sms_member
   <where>
   <if test="keyword != null">
        <bind name="pattern1" value="'%' + keyword + '%'"/>
        nick_name like #{pattern1}
    </if>
    </where>
  </select>
  
  <!-- 내 정보 업데이트 -->
  <update id="update" parameterType="member">
    update sms_member
    set
      nick_name = #{nickName},
      photo = #{photo},
      adr_lms = #{address}
    where member_id = #{no}
  </update>
  
  <!-- 내 정보 업데이트 - 관심분야 번호 등록 -->
  <insert id="clsInsert" parameterType="map">
    insert into
    sms_member_cls
      (
      member_id,
      cls_lms
      )
    values
      (
      #{no},
      #{cls}
      )
  </insert>
  
  <!-- 내 정보 업데이트 - 관심분야 번호 제거 -->
  <delete id="clsDelete" parameterType="int">
    delete
    from
      sms_member_cls
    where
      member_id = #{value}
  </delete>
  
   <insert id="insert" parameterType="member">
   insert 
   into 
   sms_member(
    email, 
    name, 
    nick_name
    <if test="password != null">
    , pwd
    </if>
    )
    values(
   #{email}, 
    #{name}, 
    #{nickName}
    <if test="password != null">
    , password(#{password})
    </if>
    );
  </insert>
  
  <!-- 비밀번호 업데이트 -->
  <update id="updatePassword" parameterType="member">
    update sms_member
    set
      pwd = password(#{password})
    where member_id = #{no}
  </update>
  
  <select id="findByNo" resultMap="memberMap" parameterType="int">
    select
      m.member_id, 
      m.nick_name, 
      m.name,
      m.email, 
      m.tel,
      m.admin,
      m.adr_lms,
      m.join_date,
      m.rate,
      m.photo,
      m.birth,
      c.cls_lms
    from 
      sms_member m
      left outer join sms_member_cls c on m.member_id = c.member_id
    where 
      m.member_id = #{value}
  </select>
  
   <select id="findByNickName" resultType="int" parameterType="string">
    select 
      member_id 
    from 
      sms_member
    where
      nick_name = #{value}
  </select>
  
  <select id="findMemberNoByNickNameList" resultType="int" parameterType="list">
    select 
      member_id 
    from 
      sms_member
    where
      <foreach collection="list" item="k" separator="or">
    nick_name = #{k}
      </foreach>
  </select>
  
  <update id="updateRate" parameterType="map" >
    update sms_member
      set
        rate = #{rateAvg}
      where member_id = #{no}
  </update>
  
</mapper>










